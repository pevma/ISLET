#!/usr/bin/env bash

##############################################
# Run verify scripts to ensure all is well
# Globals:
#  None
# Arguments:
#  None
# Returns:
#  None
##############################################

verify(){
  import_configs
  verify_group
  verify_availability
  return 0
}

#######################################
# Verify Docker availability
# ISLET configuration
# Globals:
#  $DOCKER_DIR - Docker path
# Arguments:
#   None
# Returns:
#   None
#######################################

verify_availability(){
  [[ -d "$DOCKER_DIR" ]] || quit "Fatal: $DOCKER_DIR cannot be found! Ensure Docker is installed, or update docker.conf "
  docker info 1>/dev/null 2>&1 || quit "Fatal: There is an issue with the docker configuration!"
}

#######################################
# Verify group settings
# ISLET configuration
# Globals:
#  $USER - System user that runs Docker
# Arguments:
#   None
# Returns:
#   None
#######################################

verify_group(){
  getent group docker 1>/dev/null 2>&1 || quit "Fatal: docker group doesn't exist!"
  getent group docker 2>/dev/null | grep -q $USER || quit "Fatal: $USER user not in docker group"
}

#######################################
# Get storage backend name
# ISLET configuration
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################

get_backend(){
  local line="$(docker info 2>/dev/null | fgrep -i 'storage')"
  local backend="${line##* }"
  [[ "$backend" ]] || quit "Fatal: Docker storage backend wasn't found"
  echo "$backend"
}

#######################################
# Handle exit codes
# Globals:
#   None
# Arguments:
#   result
# Returns:
#   None
#######################################

exit_handler(){
  local result="$1"
  [[ $result -eq 124 ]] && quit "Inactive timer expired in menu, exiting..."
  [[ $result -eq 127 ]] && return 0 # Value 127 is last given command is not found
  [[ $result -eq 130 ]] && return 0 # Value 130 SIGINT (^C) was sent, probably by user
  if [[ $result -ne 0 ]]; then
    [[ $DEBUG != "yes" ]] && quit " Fatal: Command returned non-zero status! Turn on debug mode for more info: DEBUG=yes in $CONFIG"
  fi
}

attach(){
  import_configs
  local result
  # User is re-attaching to previous image
  log "${USERNAME}: Returning user from $CLIENT"
  notice "Welcome back!"
  mention "$MOTD"
  is_debug "opt: docker start -i ${BASE}.${USERNAME}"
  docker start -i "${BASE}.${USERNAME}"
  exit_handler $? || return 1
  # No errors, we made it
  return 0
}

######################################################################
# Check if image exists before using it, try pulling it or fail out
# Globals:
#   ENVIRONMENT         - from ISLET configuration, docker image to launch
# Arguments:
#   None
# Returns:
#   None
######################################################################

does_image_exist(){
  local tag
  local repo="$ENVIRONMENT"
  [[ "$repo" == *:* ]] && tag="${repo##*:}" && repo=${repo%%:*}
  [[ $tag ]] || tag=latest
  if ! docker images | fgrep -w "$repo" | fgrep -w -q "$tag"; then
    notice "Image not found, trying Docker Hub..." && echo
    docker pull "$ENVIRONMENT" 2>/dev/null || quit "Fatal: Image doesn't exist!"
  fi
  unset tag repo
}

#################################################################################
# Create iptables rules for port forwarding to container
# Used to access ports on a user's container to do things
# like web interface training. Use PPID of session (sshd) as
# the port to use for forwarding, that way we can keep track
# of each user's session to iptables rule.
# Globals:
#   VIRTUAL_PORT - Port running inside container to access
#   HOST_PORT    - Port from host that's forwarded to container (VIRTUAL_PORT)
#   BIND         - IP address to use to access containers
#   CLIENT       - IP address of client provided by sshd
#   INTERFACE    - Network interface to apply iptables rule
#   USER         - Used for logging
#   PUBLISH      - Combination of above to set the Docker forwarding rule
# Arguments:
#   None
# Returns:
#   None
#################################################################################

port_forwarding_setup(){
  # Use HOST_PORT and CLIENT as a way to associate the user with a container port (VIRTUAL_PORT)
  if [[ "$VIRTUAL_PORT" ]]; then
    # If host port is in use, find another to bind to
    while true; do
      if ! netstat -nalt | fgrep -q ":$HOST_PORT"; then
        break
      fi
      let HOST_PORT++
    done

    PUBLISH="--publish $BIND:$HOST_PORT:$VIRTUAL_PORT"

    if [[ "$BIND" == "127.0.0.1" ]]; then
      sysctl -w net.ipv4.conf."${INTERFACE}".route_localnet=1 2>/dev/null
      did_it_work "sysctl command failed to execute, check ${USER}'s permissions"
    fi
    # Client will be able to connect to an exposed container port via $SERVER:$PPID
    iptables -t nat -I PREROUTING -i "$INTERFACE" \
      -p tcp --source "$CLIENT" --dport "$HOST_PORT" -j DNAT --to "${BIND}:${HOST_PORT}" 2>/dev/null
    did_it_work "iptables command failed to execute, check ${USER}'s permissions"
  fi
}

######################################################################
# Remove container if set to remove or port forwarding is used.
# Removal means no reattachment and is useful in some training cases
# e.g. limited storage, resource constraints, confidential data, and
# port forwarding where we cannot guarentee the same port or client IP
# Globals:
#   REMOVE        - Option in ISLET configuration files for removal
#   VIRTUAL_PORT  - If set pass the remove option to Docker
#   DB            - Database to write to
#   BASE          - Add image to database for account if no removal
# Arguments:
#   None
# Returns:
#   None
######################################################################

removal_setup(){
  if [[ "$REMOVE" == "yes" ]] || [[ "$VIRTUAL_PORT" ]]; then
    # Re-attachment is impractical for port forwarding
    echo
    notice "This container is set to be terminated upon exit, work will not be saved."
    REMOVE="--rm"
  else
    # Don't remove, instead keep track of the user's container for re-attachment
    sqlite3 "$DB" "pragma foreign_keys = on; INSERT INTO environments(user, environment) values ('$USERNAME', '$BASE');" 2>/dev/null
    REMOVE=""
  fi
}

#####################################################################
# Build command line options for container capabilities
# Globals:
#  CAPABILITIES_OPTIONS - Stores Docker capabilities cmd-line options
# Arguments:
#   cap       - Capability name
#   enabled   - Whether capability is enabled or not (yes/no)
# Returns:
#   None
#####################################################################

set_capabilities(){
  local cap="$1"
  local enabled="$2"

  [[ "$enabled" = yes ]] && CAPABILITIES_OPTIONS="${CAPABILITIES_OPTIONS} --cap-add $cap"
  [[ "$enabled" = no ]]  && CAPABILITIES_OPTIONS="${CAPABILITIES_OPTIONS} --cap-drop $cap"
}

##################################################################
# Check and set value of capabilities values
# Globals:
#   capabilities variables - Option in ISLET configuration files
# Arguments:
#   None
# Returns:
#   None
##################################################################

check_capabilities(){
  unset CAPABILITIES_OPTIONS
  # Set all capabilities per container
  [[ "$DROP_ALL" = "yes" ]] && CAPABILITIES_OPTIONS="--cap-drop all" && return 0
  [[ "$ADD_ALL"  = "yes" ]] && CAPABILITIES_OPTIONS="--cap-add  all" && return 0


## Enabled by default in Docker (we disable them for improved security)
  AUDIT_WRITE="${CAP_AUDIT_WRITE:-no}"           && set_capabilities AUDIT_WRITE $AUDIT_WRITE
  CHOWN="${CAP_CHOWN:-no}"                       && set_capabilities CHOWN $CHOWN
  DAC_OVERRIDE="${CAP_DAC_OVERRIDE:-no}"         && set_capabilities DAC_OVERRIDE $DAC_OVERRIDE
  FOWNER="${CAP_FOWNER:-no}"                     && set_capabilities FOWNER $FOWNER
  FSETID="${CAP_FSETID:-no}"                     && set_capabilities FSETID $FSETID
  MAC_OVERRIDE="${CAP_MAC_OVERRIDE:-no}"         && set_capabilities MAC_OVERRIDE $MAC_OVERRIDE
  MKNOD="${CAP_MKNOD:-no}"                       && set_capabilities MKNOD $MKNOD
  NET_BIND_SERVICE="${CAP_NET_BIND_SERVICE:-no}" && set_capabilities NET_BIND_SERVICE $NET_BIND_SERVICE
  NET_RAW="${CAP_NET_RAW:-no}"                   && set_capabilities NET_RAW $NET_RAW
  SETPCAP="${CAP_SETPCAP:-no}"                   && set_capabilities SECPCAP $SECPCAP
  SYSLOG="${CAP_SYSLOG:-no}"                     && set_capabilities SYSLOG $SYSLOG
  SYS_ADMIN="${CAP_SYS_ADMIN:-no}"               && set_capabilities SYS_ADMIN $SYS_ADMIN
  SYS_CHROOT="${CAP_SYS_CHROOT:-no}"             && set_capabilities SYS_CHROOT $SYS_CHROOT
  KILL="${CAP_KILL:-no}"                         && set_capabilities KILL $KILL
  # Enabled by default for ISLET (subset of Docker defaults) for improved security
  SETFCAP="${CAP_SETFCAP:-yes}"                  && set_capabilities SETFCAP $SETFCAP
  SETUID="${CAP_SETUID:-yes}"                    && set_capabilities SETUID $SETUID
  SETGID="${CAP_SETGID:-yes}"                    && set_capabilities SETGID $SETGID

  ## Enabled/Others
  AUDIT_CONTROL="${CAP_AUDIT_CONTROL:-no}"       && set_capabilities AUDIT_CONTROL $AUDIT_CONTROL
  BLOCK_SUSPEND="${CAP_BLOCK_SUSPEND:-no}"       && set_capabilities BLOCK_SUSPEND $BLOCK_SUSPEND
  DAC_READ_SEARCH="${CAP_DAC_READ_SEARCH:-no}"   && set_capabilities DAC_READ_SEARCH $DAC_READ_SEARCH
  IPC_LOCK="${CAP_IPC_LOCK:-no}"                 && set_capabilities IPC_LOCK $IPC_LOCK
  IPC_OWNER="${CAP_IPC_OWNER:-no}"               && set_capabilities IPC_OWNER $IPC_OWNER
  LEASE="${CAP_LEASE:-no}"                       && set_capabilities LEASE $LEASE
  LINUX_IMMUTABLE="${CAP_LINUX_IMMUTABLE:-no}"   && set_capabilities LINUX_IMMUTABLE $LINUX_IMMUTABLE
  NET_ADMIN="${CAP_NET_ADMIN:-no}"               && set_capabilities NET_ADMIN $NET_ADMIN
  NET_BROADCAST="${CAP_NET_BROADCAST:-no}"       && set_capabilities NET_BROADCAST $NET_BROADCAST
  SYS_BOOT="${CAP_SYS_BOOT:-no}"                 && set_capabilities SYS_BOOT $SYS_BOOT
  SYS_MODULE="${CAP_SYS_MODULE:-no}"             && set_capabilities SYS_MODULE $SYS_MODULE
  SYS_PACCT="${CAP_SYS_PACCT:-no}"               && set_capabilities SYS_PACCT $SYS_PACCT
  SYS_PTRACE="${CAP_SYS_PTRACE:-no}"             && set_capabilities SYS_PTRACE $SYS_PTRACE
  SYS_NICE="${CAP_SYS_NICE:-no}"                 && set_capabilities SYS_NICE $SYS_NICE
  SYS_RAWIO="${CAP_SYS_RAWIO:-no}"               && set_capabilities SYS_RAWIO $SYS_RAWIO
  SYS_RESOURCE="${CAP_SYS_RESOURCE:-no}"         && set_capabilities SYS_RESOURCE $SYS_RESOURCE
  SYS_TIME="${CAP_SYS_TIME:-no}"                 && set_capabilities SYS_TIME $SYS_TIME
  SYS_TTY_CONFIG="${CAP_SYS_TTY_CONFIG:-no}"     && set_capabilities SYS_TTY_CONFIG $SYS_TTY_CONFIG
  WAKE_ALARM="${CAP_SYS_PTRACE:-no}"             && set_capabilities WAKE_ALARM $WAKE_ALARM
}

#####################################################################
# Build command line options for ulimit settings
# Globals:
#  ULIMIT_OPTIONS - Stores Docker ulimit cmd-line options
# Arguments:
#   limit       - Ulimit name
#   value       - Value of ulimit settings
# Returns:
#   None
#####################################################################

set_ulimits(){
  local limit="$1"
  local value="$2"

  [[ "$value" = "no" ]] || ULIMIT_OPTIONS="${ULIMIT_OPTIONS} --ulimit ${limit}=${value}"
}

##################################################################
# Check and set value of ulimits per container
# Globals:
#   ulimit variables - Option in ISLET configuration files
# Arguments:
#   None
# Returns:
#   None
##################################################################

check_ulimits(){
  unset ULIMIT_OPTIONS

  # Set ulimits per container
  [[ "$ULIMIT_CORE" ]]       && set_ulimits core       $ULIMIT_CORE
  [[ "$ULIMIT_CPU"  ]]       && set_ulimits cpu        $ULIMIT_CPU
  [[ "$ULIMIT_DATA" ]]       && set_ulimits data       $ULIMIT_DATA
  [[ "$ULIMIT_FSIZE" ]]      && set_ulimits fsize      $ULIMIT_FSIZE
  [[ "$ULIMIT_LOCKS" ]]      && set_ulimits locks      $ULIMIT_LOCKS
  [[ "$ULIMIT_MEMLOCK" ]]    && set_ulimits memlock    $ULIMIT_MEMLOCK
  [[ "$ULIMIT_MSGQUEUE" ]]   && set_ulimits msgqueue   $ULIMIT_MSGQUEUE
  [[ "$ULIMIT_NICE" ]]       && set_ulimits nice       $ULIMIT_NICE
  [[ "$ULIMIT_NOFILE" ]]     && set_ulimits nofile     $ULIMIT_NOFILE
  [[ "$ULIMIT_NPROC" ]]      && set_ulimits nproc      $ULIMIT_NPROC
  [[ "$ULIMIT_RSS" ]]        && set_ulimits rss        $ULIMIT_RSS
  [[ "$ULIMIT_RTPRIO" ]]     && set_ulimits rtprio     $ULIMIT_RTPRIO
  [[ "$ULIMIT_RTTIME" ]]     && set_ulimits rttime     $ULIMIT_RTTIME
  [[ "$ULIMIT_SIGPENDING" ]] && set_ulimits sigpending $ULIMIT_SIGPENDING
  [[ "$ULIMIT_STACK" ]]      && set_ulimits stack      $ULIMIT_STACK
}

##################################################################
# Setup variables for inclusion by Docker
# Globals:
#   ENVS - Option in ISLET configuration files
# Arguments:
#   None
# Returns:
#   None
##################################################################

env_setup(){
  for i in $ENVS; do
   ENV_CMD="${ENV_CMD} --env $i"
  done
}

###############################################################################################
# Pass all options to Docker and replace this process with the container
# Globals:
#   BASE            - Environment base filename, is container prefix used to build container name
#   USERNAME        - given username for login, container postfix, used to build container name
#   HOSTNAME        - from ISLET config files, hostname of container
#   COMMAND         - from ISLET config files, set entrypoint command for container
#   CPUSHARES       - from ISLET config files, relative cpu share allocation per container
#   MEMORY          - from ISLET config files, memory allocation per container
#   SWAP            - from ISLET config files, swap memory allocation per container
#   NETWORK         - from ISLET config files, network settings for container
#   DNS             - from ISLET config files, nameservers for container
#   GLOBAL_OPTIONS  - from ISLET config files, pass docker options to all containers
#   LOCAL_OPTIONS   - from ISLET config files, pass per-environment docker options
#   MOUNT           - from ISLET config files, pass mount options to docker
#   REMOVE          - from ISLET config files, remove container after exit
#   ENVIRONMENT     - from ISLET config files, docker image to launch
#   VIRTUSER        - from ISLET config files, user to become in container
#   ENVS            - from ISLET config files, environment variables to set in container
#   WORKDIR         - from ISLET config files, working directory in container
#   CLIENT          - ip address of connecting user
#   SRCPORT         - source port of connecting user
#   SERVER          - ip address of islet server
#   DSTPORT         - ssh destination port of islet server
#   SSH_TTY         - name of the tty associated with the current shell
#   TERM            - terminal used
#   PPID            - pid of the sshd process of the user's session
#   TMOUT           - shell's timeout value
#   TIMEOUT         - from ISLET config files, max time container can run
#   INFOLEVEL       - from ISLET config files, DEBUG'ing information
# Arguments:
#   None
# Returns:
#   None
###############################################################################################

start(){
  import_configs
  local result
  does_image_exist
  removal_setup
  port_forwarding_setup
  check_capabilities
  check_ulimits
  env_setup

  local name_opt="--name="${BASE}.${USERNAME}" --tty --hostname $HOSTNAME"
  local res_opt="--memory ${MEMORY:-0} --memory-swap ${SWAP:--1}"
  local net_opt="$PUBLISH --net $NETWORK --dns $DNS --add-host $HOSTNAME:127.0.0.1"
  local glb_opt="$GLOBAL_OPTIONS"
  local oth_opt="$LOCAL_OPTIONS"
  local cap_opt="$CAPABILITIES_OPTIONS"
  local lmt_opt="$ULIMIT_OPTIONS"
  local mnt_opt="$MOUNT"
  local dir_opt="--workdir ${WORKDIR:-/home/$VIRTUSER}"
  local env_opt="--user ${VIRTUSER:-root} $ENV_CMD"
  local img_opt="$REMOVE --interactive $ENVIRONMENT"
  local cmd_opt="${COMMAND:-bash}"
  local tim_opt="timeout -s KILL $TIMEOUT"

  # If debugging is yes
  is_debug "shell: CLIENT=$CLIENT SRCPORT=$SRCPORT SERVER=$SERVER DSTPORT=$DSTPORT SSH_TTY=$SSH_TTY TERM=$TERM PPID=$PPID TMOUT=$TMOUT"
  is_debug "opt: docker run $name_opt $res_opt $net_opt $glb_opt $oth_opt $mnt_opt $cap_opt $lmt_opt $dir_opt $env_opt $img_opt $tim_opt $cmd_opt"

  notice "Enjoy yourself!"
  mention "$MOTD"

  # Run container
  eval docker run "$name_opt $res_opt $net_opt $glb_opt $oth_opt $cap_opt $lmt_opt $mnt_opt $dir_opt $env_opt $img_opt $tim_opt $cmd_opt" "$INFOLEVEL"
  exit_handler $?
}

"$@"
